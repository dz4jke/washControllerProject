#pragma once
#include <GyverNTC.h> // Библиотека для работы с NTC-термисторами
#include <Arduino.h>  // Для constrain()

/*
 * Класс для работы с датчиком температуры
 * Реализует:
 * - Сглаживание показаний с помощью экспоненциального скользящего среднего
 * - Проверку исправности датчика (выход за допустимый диапазон)
 * - Калибровку показаний
 */
class TemperatureSensor {
private:
    GyverNTC ntc;                  // Объект датчика NTC-термистора
    float filteredTemp;            // Отфильтрованное значение температуры
    const float alpha;             // Коэффициент фильтра (0.0-1.0), определяет степень сглаживания
    float calibrationOffset;       // Калибровочное смещение
    const float one_minus_alpha;   // 1 - alpha (для оптимизации вычислений)

public:
    /*
     * Конструктор
     * pin - аналоговый пин, к которому подключен термистор
     * R - сопротивление делителя напряжения (обычно 10 кОм)
     * B - B-коэффициент термистора (указывается в спецификации термистора)
     * a - коэффициент фильтрации (0.0-1.0), рекомендуется 0.01f - 0.3f
     */
    TemperatureSensor(uint8_t pin, int R = 10000, int B = 3950, float a = 0.1f) 
        : ntc(pin, R, B), 
          filteredTemp(0.0f), 
          alpha(constrain(a, 0.01f, 0.3f)), // Ограничиваем alpha в разумных пределах
          calibrationOffset(0.0f),
          one_minus_alpha(1.0f - alpha) 
    {}

    /*
     * Обновление показаний датчика
     * Должно вызываться регулярно (например, в loop()), чтобы получать актуальные данные
     */
    void update() {
        float rawTemp = ntc.getTemp(); 
        // Применение экспоненциального скользящего среднего для сглаживания
        filteredTemp = alpha * rawTemp + one_minus_alpha * filteredTemp;
    }

    /*
     * Получение текущей температуры с учетом калибровки
     * Возвращает температуру в градусах Цельсия (°C)
     */
    float getTemp() const { 
        return filteredTemp + calibrationOffset; 
    }

    /*
     * Проверка исправности датчика
     * Возвращает false, если отфильтрованное показание температуры выходит
     * за заведомо нереалистичные пределы (-50°C до 150°C), что может указывать
     * на обрыв или короткое замыкание датчика.
     */
    bool isSensorOK() const {
        // Проверяем, находится ли температура в разумном диапазоне
        return !(filteredTemp <= -50.0f || filteredTemp >= 150.0f);
    }

    /*
     * Калибровка датчика
     * referenceTemp - эталонная температура, измеренная другим (более точным) прибором
     */
    void calibrate(float referenceTemp) {
        // Рассчитываем смещение между эталонной и измеренной температурой
        calibrationOffset = referenceTemp - filteredTemp;
    }
};
